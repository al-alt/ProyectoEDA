#include "Lab.h"

Place* Place_Ctor(int rows, int colms, int board[][COLS]) 
{
	Place* new = (Place*)malloc(sizeof(Place));
	assert(new);

	new->rows = rows;
	new->colms = colms;
	for (size_t i = 0; i < rows; i++) {
		for (size_t j = 0; j < colms; j++) {
			new->map[i][j] = board[i][j];
		}
	}
	return new;
}

void Place_Dtor(Place* this) 
{
	assert( this );
	free(this);
	this = NULL;
}

void Place_SetCeld(Place* this, int x, int y, int type)
{
    this->map[x][y] = type;
}

int Place_GetCeld(Place* this, int x, int y)
{
    return this->map[x][y];
}

/*----------------------------------------------------------------------*/

Stack* Stack_New(size_t _capacity)
{
    Stack* s = (Stack*)malloc(sizeof(Stack));
    // crea a un nuevo objeto 

    if (NULL != s) {
        s->stack = (int*)malloc(_capacity * sizeof(int));
        // crea a un nuevo arreglo de int's 

        // abortamos la misi�n si la petici�n de memoria no pudo ser completada
        if (s->stack == NULL) {
            free(s);
            s = NULL;
        }
        else {
            s->top = 0;
            s->capacity = _capacity;
        }
    }

    return s;
}

void Stack_Delete(Stack* this)
{
    assert(this);

    free(this->stack);
    // devuelve la memoria del arreglo

    free(this);
    // devuelve la memoria del objeto
}

bool Stack_IsEmpty(Stack* this)
{
    return (this->top == 0);
}

bool Stack_IsFull(Stack* this)
{
    return (this->top >= this->capacity);
}

void Stack_Push(Stack* this, int _data)
{
    assert(this->top < this->capacity);
    // si top es igual a capacity, entonces tenemos un problema

    this->stack[this->top] = _data;

    ++this->top;
}
